
1.日志定时任务
   1).访问日志采集
   2).异常日志采集 https://blog.csdn.net/qq_33589252/article/details/84350064
   3).日志切割
   4).前置代理模式 （开启nginx反向代理后才可以使用）
   日志采集 确认用户的真实 IP，请求协议，甚至请求的域名，让应用层获取到真实的用户请求信息
    https://eggjs.org/zh-cn/tutorials/proxy.html

2.封装httpclient 请求基类
https://gitee.com/mmdapl/egg-axios-plus/

3.egg 结合 nuxt
静态资源构建  如： webpack
https://eggjs.org/zh-cn/tutorials/assets.html







============   日志采集  ============z
日志分为 NONE，DEBUG，INFO，WARN 和 ERROR 5 个级别

**** 默认只会输出 INFO 及以上（WARN 和 ERROR）的日志到文件中
exports.logger = {
  level: 'DEBUG',
};


未捕获异常
异常日志捕捉
日志定时任务(日志切割，自定义日志 异常上报)


App Logger
app.logger   应用级别的日志记录
agent.logger   
agent 进程日志，框架和使用到 agent 进程执行任务的插件会打印
使用方式 agent.coreLogger

Context Logger(Controller Logger & Service Logger)
ctx.logger
Context Logger 用于记录 Web 请求相关的日志，它打印的日志都会在前面带上一些当前请求相关的信息,还会额外的加上文件路径，方便定位日志的打印位置（如 [$userId/$ip/$traceId/${cost}ms $method $url]），通过这些信息，我们可以从日志快速定位请求，并串联一次请求中的所有的日志。
如果需要对用户的 IP 做限流、防刷限制，请不要使用当前请求客户端IP , 要通过 ctx.ip 来获取，参考 前置代理模式。

errorLogger
任何logger的 .error()都会重定向到 common-error.log
例子 ctx.logger.error(throw new Error('test'))

Context CoreLogger
框架内核、插件日志

App CoreLogger
app.coreLogger
框架内核、插件日志



未捕获异常
 优雅退出

异常日志捕捉
所有的应用代码都用 try catch 来捕获异常
***异步操作都通过 await 串接，但只要有一个地方跳出了异步调用链，异常就捕获不到了。
尽管框架会在最外层通过 try catch 统一捕获错误

使用ctx.runInBackground，所有在这个 scope 里面的错误都会统一捕获
// 下单后需要进行一次核对，且不阻塞当前请求
ctx.runInBackground(async () => {
  // 这里面的异常都会统统被 Backgroud 捕获掉，并打印错误日志
  await ctx.service.trade.check(request);
});

所有异常信息必须都是Error类型，只有Error类型才会带上堆栈信息，方便定位问题；



性能
通常 Web 访问是高频访问，每次打印日志都写磁盘会造成频繁磁盘 IO，为了提高性能，我们采用的文件日志写入策略是：

日志同步写入内存，异步每隔一段时间(默认 1 秒)刷盘

按天切割
这是框架的默认日志切割方式，在每日 00:00 按照 .log.YYYY-MM-DD 文件名进行切割。


============  View 模板渲染  ============
1. 渲染页面
render(name, locals) 渲染模板文件, 并赋值给 ctx.body
renderView(name, locals) 渲染模板文件, 仅返回不赋值
renderString(tpl, locals) 渲染模板字符串, 仅返回不赋值

2.Locals (需要传递给模板的变量) 
app.locals 为全局的，一般在 app.js 里面配置全局变量。
ctx.locals 为单次请求的，会合并 app.locals。
`app.locals` 会合并到 `ctx.locals
直接用ctx.locals 赋值



============  中间件的使用  ============
1.在框架和插件中使用中间件
app.config.coreMiddleware.unshift('report');
这种中间件是全局的，会处理每一次请求

2.router 中使用中间件
针对单个路由生效，可以直接在 app/router.js 中实例化和挂载
app.router.get('/needgzip', gzip, app.controller.handler);

3.框架默认自带一些中间件
如 bodyParser


============   egg-cluster 与 Pm2 对比 ============
1. PM2 模块本身复杂度很高，出了问题很难排查。我们认为框架使用的工具复杂度不应该过高，而 PM2 自身的复杂度超越了大部分应用本身。
2. 没法做非常深的优化。
3. 切实的需求问题，一个进程里跑 leader，其他进程代理到 leader 这种模式（多进程模型），在企业级开发中对于减少远端连接，降低数据通信压力等都是切实的需求
4. 多进程模型（Master - Worker - Agent）是 PM2 无法支持, 通过 egg-cluster 可以实现
5. egg-cluster 底层的几个库很完善
  node-modules/cfork 实现了完整的进程守护
  node-modules/graceful-process 实现进程的优雅退出

1.进程
2.监控
3.日志


日志功能，我们自带的 logger 扩展性更好，契合度更高
CLI 方面，我们有 egg-bin 开发期，egg-scripts 线上
Tracing 功能，交给 open-tracing 相关插件去做



============  环境变量  ============
app.config.env 获取环境变量
环境变量EGG_SERVER_ENV
local 本地开发
sit   sit环境 设置EGG_SERVER_ENV为sit
uat   uat环境 设置EGG_SERVER_ENV为uat
prod  生产
当设置NODE_ENV未设置EGG_SERVER_ENV时，EGG_SERVER_ENV会设置成prod
当指定 env = prod 时会加载config.prod.js 配置文件，并覆盖config.default.js的同名配置。



============  本地开发  ============

npm run dev启动服务
配置是 config.default.js 和 config.local.js 合并的结果，后者会覆盖前者

覆盖率报告 npm run cov
open coverage/lcov-report/index.html

debug
vscode debug 打断点

============  测试环境和生产环境部署  ============
1.构建   
typescript编译

2.部署 
$ cd baseDir
$ npm install --production 只安装 dependencies 的依赖。
$ tar -zcvf ../release.tgz 
构建完成后打包成 tgz 文件，部署的时候解压启动就可以了

安装 node >=8.0.0

进程守护： 框架内置了 egg-cluster 来启动 Master 进程,不需要pm2
egg-scripts 来支持线上环境的运行和停止

3.一次构建多次部署

--port=7001 端口号

4.发布管理和发布策略
https://eggjs.org/zh-cn/contributing.html



============  egg-scripts  ============
egg-scripts start --port=7001 --daemon --title=egg-server-ssr
egg-scripts stop [--title=egg-server-ssr] 杀死指定egg应用，未传参杀死所有egg应用

ps -eo "pid,command" | grep -- "--title=egg-server-ssr" 来找到 master 进程，并 kill 掉，无需 kill -9


--port=7001 端口号，默认会读取环境变量 process.env.PORT
--daemon 是否允许在后台模式，无需 nohup
--env=prod 框架运行环境，默认会读取环境变量 process.env.EGG_SERVER_ENV，默认prod
--workers=4 框架 worker 线程数，默认会创建和 CPU 核数相当的 app worker 数,可以充分的利用 CPU 资源
--title=egg-server-showcase 用于方便 ps 进程时 grep 用
--https.key 指定 HTTPS 所需密钥文件的完整路径
--https.cert 指定 HTTPS 所需证书文件的完整路径


============  HttpClient  ============
框架在应用初始化的时候，会自动将 HttpClient 初始化到 app.httpclient


使用方式 

1.GET 
app.curl('https://registry.npm.taobao.org/egg/latest', {
      dataType: 'json',
    });

ctx.curl('https://registry.npm.taobao.org/egg/latest', {
      // 自动解析 JSON response
      dataType: 'json',
      // 3 秒超时
      timeout: 3000,
    });

    ctx.body = {
          "resultCode": 0,
          "resultMsg": "succ",
          "errorData": {
              code: 'CSR4400006'
          },
          "actionData": null,
          "resultData": {}
      }

2.POST 
ctx.curl('https://httpbin.org/post', {
      // 必须指定 method
      method: 'POST',
      // 通过 contentType 告诉 HttpClient 以 JSON 格式发送
      contentType: 'json',
      data: {
        hello: 'world',
        now: Date.now(),
      },
      // 明确告诉 HttpClient 以 JSON 格式处理返回的响应 body
      dataType: 'json',
    });

3.Form 表单提交 （（不包含文件））
*** content-type: application/x-www-form-urlencoded
ctx.curl('https://httpbin.org/post', {
      // 必须指定 method，支持 POST，PUT 和 DELETE
      method: 'POST',
      // 不需要设置 contentType，HttpClient 会默认以 application/x-www-form-urlencoded 格式发送请求
      data: {
        now: Date.now(),
        foo: 'bar',
      },
      // 明确告诉 HttpClient 以 JSON 格式处理响应 body
      dataType: 'json',
    });

4.Form 表单提交 （（包含文件））
ctx.curl('https://httpbin.org/post', {
      method: 'POST',
      dataType: 'json',
      data: {
        foo: 'bar',
      },

      // 单文件上传
      files: __filename,

      // 多文件上传
      // files: {
      //   file1: __filename,
      //   file2: fs.createReadStream(__filename),
      //   file3: Buffer.from('mock file content'),
      // },
    });




============   私有属性与慢初始化  ============
1.私有属性用 Symbol 来挂载。
2.Symbol 的描述遵循 jsdoc 的规则，描述映射后的类名+属性名。
3.延迟初始化


// app/extend/application.js
const CACHE = Symbol('Application#cache');
const CacheManager = require('../../lib/cache_manager');

module.exports = {
  get cache() {
    if (!this[CACHE]) {
      this[CACHE] = new CacheManager(this);
    }
    return this[CACHE];
  },
}



============   多进程模型和进程间通讯  ============
https://eggjs.org/zh-cn/core/cluster-and-ipc.html#agent-%E6%9C%BA%E5%88%B6
多进程研发模式增强
https://eggjs.org/zh-cn/advanced/cluster-client.html


============  安全  ============
https://eggjs.org/zh-cn/core/security.html
egg-security 插件 



============  监控  ============
性能监控，性能优化，安全提醒，内存泄露分析，故障排除等

1.Node.js 性能平台（alinode）
https://eggjs.org/zh-cn/core/deployment.html
https://www.aliyun.com/product/nodejs
2.NSolid
3.sgm监控 需要egg logger自定义集成 (集团内部监控系统： 是否支持 node 和 浏览器 日志采集)
4.Easy-Monitor 3.0 开源 - 基于 Egg 的 Node.js 性能监控解决方案
https://zhuanlan.zhihu.com/p/147576798?utm_source=wechat_session&utm_medium=social&utm_oi=29072532963328&from=timeline&isappinstalled=0&s_r=0